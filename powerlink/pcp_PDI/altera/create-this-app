#!/bin/bash
###############################################################################
# This script creates the openPOWERLINK DPRAM Interface PCP application
# in this directory.
###############################################################################

###############################################################################
# USER SETTINGS: Select here the debug level and general CN API settings

###############################################################################

###############################################################################
# include project configuration
PWD=`pwd`

. ../../project.config  						# include PATH settings
PCP_DIR=$PWD/..                                  
BSP_DIR=$PWD/bsp
CNDK_DIR=$PCP_DIR/../

# replace this path to the object dictionary you wish to include
OBJDICTDIR=$PWD/../../objDicts/PDI

###############################################################################
INPUT_VARS=$@

echo --- This is create-this-app ---
echo input parameters: $INPUT_VARS

# First, check to see if $SOPC_KIT_NIOS2 environmental variable is set.
# This variable is required for the command line tools to execute correctly.
if [ -z $SOPC_KIT_NIOS2 ]
then
    echo Required \$SOPC_KIT_NIOS2 Environmental Variable is not set!
    exit 1
fi

# save arguments for passing to create-this-bsp
SAVE_ARGS=$@

# process arguments
SKIP_MAKE=
REBUILD=
NO_OPT=
DEBUG_LVL_IN=
while [ $# -gt 0 ]
do
  case "$1" in
      # Don't run make if create-this-app script is called with --no-make arg
      --no-make)
         SKIP_MAKE=1
         ;;
      --rebuild)
         rm -f ./Makefile ${BSP_DIR}/settings.bsp
         REBUILD=1
         ;;
      --debug)
         NO_OPT=1
         ;;
      --debug_lvl)
         shift
         DEBUG_LVL_IN="$1"
         echo INFO: DEBUG_LVL_IN set to \"$DEBUG_LVL_IN\"          
         ;;
	  --sopcdir)
		 shift
		 #relative path!
		 SOPC_DIR=$PWD/$1
		 echo INFO: SOPC_DIR set to \"$SOPC_DIR\"
		 echo -------------------------------
		 ;; 
  esac
  shift
done

###############################################################################
# Include directories
INCLUDES="\
${PWD} \
${EDRV_DIR}/openmac/include \
${PCP_TARGET_DIR}/altera_nios/include \
${PCP_COMMON_DIR}/inc \
${POWERLINKDIR}/Include \
${POWERLINKDIR}/Include/user \
${POWERLINKDIR}/SharedBuff \
${POWERLINKDIR}/ObjDicts \
${OBJDICTDIR} \
${CNDK_DIR}/common/inc"

###############################################################################
# Custom libraries

###############################################################################
# handle --debug parameter

# DEF_DEBUG_LVL = [
# 0x00000100L DEBUG_LVL_09 (= DEBUG_LVL_CNAPI_FUNC)
# 0x00000200L DEBUG_LVL_10 (= DEBUG_LVL_CNAPI_ERR)
# 0x00000400L DEBUG_LVL_11 (= DEBUG_LVL_CNAPI_INFO)
# 0x00000800L DEBUG_LVL_12 (= DEBUG_LVL_CNAPI_SPI)
# 0x00001000L DEBUG_LVL_13 (= DEBUG_LVL_CNAPI_ASYNC_INFO)
# 0x00002000L DEBUG_LVL_14 (= DEBUG_LVL_DEFAULT_OBD_ACC)
# 0x00004000L DEBUG_LVL_15 (= DEBUG_LVL_FWUPDATE)
# 0x00008000L DEBUG_LVL_16 (= DEBUG_LVL_CNAPI_PDO)
# 0x00010000L DEBUG_LVL_17 (= DEBUG_LVL_CNAPI_EVENT)
# 0x00020000L DEBUG_LVL_18 (= DEBUG_LVL_CNAPI_VETH)
# 0x02000000L DEBUG_LVL_26 (= EPL_DBGLVL_VETH)
# 0x20000000L DEBUG_LVL_ASSERT
# 0x40000000L DEBUG_LVL_ERROR
# 0x80000000L DEBUG_LVL_ALWAYS ]

if [ -z "$NO_OPT" ]; then
    DBG_MODE=NDEBUG	# Do not compile printf macros. This define overwrites all others printf-debug defines
    DEF_DEBUG_LVL="0x00000000L" # additionally disables all print macros
else
    case "$DEBUG_LVL_IN" in
      1)
          DBG_MODE=_DEBUG	# compile printfs()
          DEF_DEBUG_LVL="0xEC002F00L" # only ASSERT, ERROR and ALWAYS messages + Powerlink stack debugs + CN API messages
          ;;
      2)
          DBG_MODE=_DEBUG	# compile printfs()      
          DEF_DEBUG_LVL="0xEC000600L" # only ASSERT, ERROR and ALWAYS + Powerlink stack debugs 
          ;;
      *)
          echo ERROR: Wrong parameter DEBUG_LVL_IN: \"$DEBUG_LVL_IN\"
          exit 1
          ;;
    esac
fi


CFLAGS="-D${DBG_MODE} -DCN_API_FLAGS=${CN_API_FLAGS} -DDEF_DEBUG_LVL=${DEF_DEBUG_LVL}"

###############################################################################
# source files

# select phy configuration file according to target board (SOPC directory)
MatchCnt=$(echo $SOPC_DIR | grep "BeMicro" -c)
if [ $MatchCnt -eq 1 ]; then
    PHYCFG_C_FILE="omethlib_phycfg_bemicro.c"
else
    PHYCFG_C_FILE="omethlib_phycfg_generic.c"

fi


# set source files
SRCFILES="pcpMain.c \
pcpAsync.c \
pcpPdo.c \
pcpObjects.c \
pcpAsyncSm.c \
pcpAsyncVeth.c \
pcpStateMachine.c \
pcpEvent.c \
pcpSync.c \
pcpCtrlReg.c \
${PCP_TARGET_DIR}/altera_nios/src/fpgaCfg.c \
${PCP_TARGET_DIR}/altera_nios/src/fwUpdate.c \
${PCP_TARGET_DIR}/altera_nios/src/fwBoot.c \
${PCP_TARGET_DIR}/altera_nios/src/systemComponents.c \
${PCP_COMMON_DIR}/src/EplObduDefAcc.c \
${PCP_COMMON_DIR}/src/EplObduDefAccHstry.c \
${PCP_COMMON_DIR}/src/crc32.c \
${OBJDICTDIR}/Objdict.c \
${CNDK_DIR}/common/src/stateMachine.c \
${EDRV_DIR}/openmac/source/EdrvOpenMac.c \
${EDRV_DIR}/openmac/source/EplTimerSynck_OpenMac.c \
${EDRV_DIR}/openmac/source/EplTgtTimeStamp_OpenMac.c \
${EDRV_DIR}/openmac/source/omethlib.c \
${EDRV_DIR}/openmac/source/omethlibint.c \
${EDRV_DIR}/openmac/source/${PHYCFG_C_FILE} \
${POWERLINKDIR}/EplStack/EplDllk.c \
${POWERLINKDIR}/EplStack/EplDllkCal.c \
${POWERLINKDIR}/EplStack/EplDlluCal.c \
${POWERLINKDIR}/EplStack/EplLedu.c \
${POWERLINKDIR}/EplStack/EplEventk.c \
${POWERLINKDIR}/EplStack/EplEventu.c \
${POWERLINKDIR}/EplStack/EplNmtk.c \
${POWERLINKDIR}/EplStack/EplNmtu.c \
${POWERLINKDIR}/EplStack/EplNmtCnu.c \
${POWERLINKDIR}/EplStack/EplPdok.c \
${POWERLINKDIR}/EplStack/EplPdokCal.c \
${POWERLINKDIR}/EplStack/EplPdou.c \
${POWERLINKDIR}/EplStack/EplPdouCal.c \
${POWERLINKDIR}/EplStack/EplObd.c \
${POWERLINKDIR}/EplStack/EplSdoComu.c \
${POWERLINKDIR}/EplStack/EplSdoAsySequ.c \
${POWERLINKDIR}/EplStack/EplSdoAsndu.c \
${POWERLINKDIR}/EplStack/EplTimeruGeneric.c \
${POWERLINKDIR}/EplStack/EplErrorHandlerk.c \
${POWERLINKDIR}/EplStack/EplApiGeneric.c \
${POWERLINKDIR}/EplStack/VirtualEthernetNoOs.c \
${POWERLINKDIR}/EplStack/amiarm.c \
${POWERLINKDIR}/Target/altera_nios2/no_os/gnu/generic/ShbTarget_Nios2.c \
${POWERLINKDIR}/SharedBuff/SharedBuff.c \
${POWERLINKDIR}/SharedBuff/ShbIpc-NoOS.c"

###############################################################################
# work-around for bug in Nios2 EDS V9.0
cmd="nios2-app-generate-makefile --bsp-dir $BSP_DIR --version"
$cmd | grep "9.0"
if [ "$?" == "0" ] ; then
# V9.0 needs additional double quotes around the include directories
INCLUDES=\"${INCLUDES}\"
fi

NIOS2_APP_GEN_ARGS="--elf-name epl.elf
--set OBJDUMP_INCLUDE_SOURCE 1 \
--set CREATE_OBJDUMP 0 \
--set CFLAGS=${CFLAGS} \
--set APP_INCLUDE_DIRS=$INCLUDES \
--src-files $SRCFILES"

if [ -z "$SOPC_DIR" ]; then
    echo "No SOPC directory specified !"
    echo "Use parameter: --sopcdir <SOPC_directory>"
    exit 1
fi

if [ -z "$NO_OPT" ]; then
    echo $NIOS2_APP_GEN_ARGS
    NIOS2_APP_GEN_ARGS="${NIOS2_APP_GEN_ARGS} --set APP_CFLAGS_OPTIMIZATION -O3"
else
# in case of --debug option ("-g" means to insert debug information)
    NIOS2_APP_GEN_ARGS="${NIOS2_APP_GEN_ARGS} --set APP_CFLAGS_OPTIMIZATION -O0 --set APP_CFLAGS_DEBUG_LEVEL -g"
fi

# Also make sure that the APP has not been created already.  Check for
# existence of Makefile in the app directory
if [ -f ./Makefile ]
then
    echo Application has already been created!
    echo Delete Makefile if you want to create a new application makefile
    echo or call this script with parameter --rebuild
    exit 1
fi


# We are selecting hal_default bsp because it supports this application.
# Check to see if the hal_default has already been generated by checking for
# existence of the public.mk file.  If not, we need to run
# create-this-bsp file to generate the bsp.
if [ -n "$REBUILD" -o ! -f $BSP_DIR/public.mk ]; then
    # Since BSP doesn't exist, create the BSP
    # Pass any command line arguments passed to this script to the BSP.
    pushd $BSP_DIR >> /dev/null
    ./create-this-bsp --cpu-name pcp_cpu $SAVE_ARGS || {
    	echo "create-this-bsp failed"
    	exit 1
    }
    popd >> /dev/null
fi


###############################################################################
# get size of tightly coupled instruction memory (in Byte)
# where time critical functions will be stored and
# verify POWERLINK IP-core version
ALT_TCIMEM_SIZE="0"
EXPECTED_POWERLINK_IP_REV=\"0.2.6\"

IN_FILE=./bsp/system.h
if [ ! -f "$IN_FILE" ]
then   # Exit if no such file.
  echo -e "$IN_FILE not found.\n"
  exit 1
fi

PATTERN[0]="TC_I_MEM_PCP_SPAN"
PATTERN[1]="POWERLINK_0_MAC_REG_PLKCOREREV"

# pattern search - loop
cnt=0
while [ $cnt -lt 2 ] ; do

pattern=${PATTERN[$cnt]}

#check if pattern can be found in the file
match_count=$(grep -w -c "$pattern" ${IN_FILE})

if [ $match_count -lt 1 ]; then
    echo "match_count = ${match_count}"
	echo "File ${IN_FILE} does not contain pattern ${PATTERN[$cnt]}"
    exit 1
fi

# get define value
PCPDefineValue=$(grep -w "$pattern" ${IN_FILE} | grep \#define | grep -v //\# | awk '{split($0,a," "); print a[3]}')
echo "Pattern taken from ${IN_FILE}: $pattern= $PCPDefineValue"

# pattern treatment
case  $cnt  in
    0)
	if [ $PCPDefineValue -ge 2048 ]; then
        ALT_TCIMEM_SIZE=$PCPDefineValue
		echo -e "TC-Memory-Size: $ALT_TCIMEM_SIZE \n"
	else
        echo -e "ERROR: TC-Memory-Size to low!\n"
        exit 1
	fi
	;;
    1)
    PCPDefineValue=$(echo ${PCPDefineValue})
    if [ $PCPDefineValue == $EXPECTED_POWERLINK_IP_REV ]; then
		echo -e "POWERLINK IP-core Version: $PCPDefineValue\n"
	else
        echo "ERROR: POWERLINK IP-core version not compliant to PCP software!"
        echo "       Expected: $EXPECTED_POWERLINK_IP_REV"
        echo "       Current:  $PCPDefineValue"
        echo "       Update your POWERLINK IP-core search path in SOPC-Builder or"
        echo -e "       the POWERLINK IP-core source files!\n"
        exit 1
	fi
    ;;
    *)echo Not a valid loop count!
	;;
esac

	cnt=$((cnt + 1))
done


# append result to comiler flags
NIOS2_APP_GEN_ARGS="${NIOS2_APP_GEN_ARGS} --set APP_CFLAGS_DEFINED_SYMBOLS -DALT_TCIMEM_SIZE=${ALT_TCIMEM_SIZE}"
###############################################################################


cmd="nios2-app-generate-makefile --bsp-dir $BSP_DIR --set QUARTUS_PROJECT_DIR=$SOPC_DIR $NIOS2_APP_GEN_ARGS"

echo "create-this-app: Running \"$cmd\""
$cmd || {
    echo "nios2-app-generate-makefile failed"
    exit 1
}

# Generate cnApiLib.h in order to inform the LIB about the PCP HW
cmd="./cfglib.sh"
echo "create-this-app: Running \"$cmd\""
$cmd || {
    echo "nios2-app-generate-makefile failed"
    exit 1
}

# get CPU instance number
UART_INSTANCE_ID=
#######################################
# read UART_INSTANCE_ID of CPU_NAME
# from JDI file
#######################################
CPU_NAME="pcp_cpu"
JDI_FILE=$SOPC_DIR/nios_openMac.jdi
IN_FILE=$JDI_FILE

if [ ! -f "$IN_FILE" ]
then   # Exit if no such file.
  echo "File $IN_FILE not found."
  exit 1
fi

#check first if cpu name is present in file
pattern=$CPU_NAME 

match_count=$(grep -w -c "$pattern" ${IN_FILE})
if [ $match_count -eq 0 ]; then
    echo "match_count = ${match_count}"
	echo "ERROR: File ${IN_FILE} does not contain pattern '${pattern}'"
    exit 1
fi

# derive instance_id which corrensponds with CPU_NAME
UART_INSTANCE_ID=$(grep -w "hpath" ${IN_FILE} | grep ${CPU_NAME} | awk '{split($0,a,"instance_id="); print a[2]}' | awk '{split($0,a,""); print a[2]}')
echo "$CPU_NAME has INSTANCE: $UART_INSTANCE_ID"
echo
#######################################

echo '# Rules for EPCS flash programming commands (EPCS contains SOF and application)
PROGRAM_EPCS_SUFFIX := -epcs
PROGRAM_EPCS_TARGET := $(addsuffix $(PROGRAM_EPCS_SUFFIX), $(FLASH_FILES))

.PHONY : program-epcs
program-epcs : $(PROGRAM_EPCS_TARGET)

SOF_FILE := $(wildcard $(QUARTUS_PROJECT_DIR)/*.sof)

.PHONY : $(PROGRAM_EPCS_TARGET)
$(PROGRAM_EPCS_TARGET) : $(ELF)

	@$(ECHO) Info: Programming $(basename $@).flash
	@if [ -n "$($(basename $@)_EPCS_FLAGS)" ]; \
	then \
		nios2-configure-sof $(DOWNLOAD_CABLE_FLAG) -C $(QUARTUS_PROJECT_DIR); \
		sof2flash --epcs --input=$(SOF_FILE) --output=sof.flash; \
		$(ELF2FLASH) --after=sof.flash --input=$(ELF) --outfile=$(basename $@)_after_sof.flash --sim_optimize=$(SIM_OPTIMIZE) $(elf2flash_extra_args); \
		$(ECHO) $(FLASHPROG) $(SOPC_SYSID_FLAG) --epcs --base=$($(basename $@)_START) sof.flash $(basename $@)_after_sof.flash; \
		$(FLASHPROG) $(DOWNLOAD_CABLE_FLAG) $(SOPC_SYSID_FLAG) --instance='$UART_INSTANCE_ID '--epcs --base=$($(basename $@)_START) \
		-g --override='$PCP_TARGET_DIR'/altera_nios/nios2-flash-override.txt sof.flash $(basename $@)_after_sof.flash; \
	fi

# Rule for erasing the EPCS memory content    
.PHONY : erase-epcs
erase-epcs:
	@nios2-configure-sof $(DOWNLOAD_CABLE_FLAG) -C $(QUARTUS_PROJECT_DIR); \
	$(ECHO) $(FLASHPROG) $(DOWNLOAD_CABLE_FLAG) $(SOPC_SYSID_FLAG) --epcs --base=$($(basename $(PROGRAM_EPCS_TARGET))_START) --accept-bad-sysid --erase-all; \
	$(FLASHPROG) $(DOWNLOAD_CABLE_FLAG) $(SOPC_SYSID_FLAG) --instance='$UART_INSTANCE_ID '--epcs --base=$($(basename $(PROGRAM_EPCS_TARGET))_START) --accept-bad-sysid --erase-all

# Rule for downloading the FPGA bitstream to the target    
.PHONY : download-bits
download-bits:
	nios2-configure-sof $(DOWNLOAD_CABLE_FLAG) -C $(QUARTUS_PROJECT_DIR)' >> makefile

if [ -z "$SKIP_MAKE" ]; then
	cmd="make"

	echo "make clean first..."
	make clean

	echo "create-this-app: Running \"$cmd\""
	$cmd || {
    	echo "make failed"
	    exit 1
	}

	echo
	echo "To download and run the application:"
	echo "    1. Make sure the board is connected to the system."
	echo "    2. Run 'make download-bits' to configure the FPGA with the hardware design."
	echo "    3. If you have a stdio device, run 'nios2-terminal' in a different shell."
	echo "    4. Run 'make download-elf' from the application directory."
	echo
	echo "To debug the application:"
	echo "    Import the project into Nios II IDE.  Refer to Nios II IDE Documentation for more information."
	echo
	echo -e ""
fi


exit 0
