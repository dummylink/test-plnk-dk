#!/bin/bash
###############################################################################
# This script creates the application in the current directory.
# It invokes create-this-bsp. 
###############################################################################

###############################################################################
CN_API_FLAGS= 	# empty							
                                                                              #
###############################################################################

###############################################################################
# include project configuration
PWD=`pwd`

. ../../project.config
POWERLINKDIR=$PWD/../powerlink/generic/${POWERLINKFLDR}
BSP_DIR=$PWD/bsp
APPDIR=$PWD

###############################################################################
INPUT_VARS=$@

echo --- This is create-this-app ---
echo input parameters: $INPUT_VARS

# First, check to see if $SOPC_KIT_NIOS2 environmental variable is set.
# This variable is required for the command line tools to execute correctly.
if [ -z $SOPC_KIT_NIOS2 ]
then
    echo Required \$SOPC_KIT_NIOS2 Environmental Variable is not set!
    exit 1
fi

# save arguments for passing to create-this-bsp
SAVE_ARGS=$@

# process arguments
SKIP_MAKE=
REBUILD=
NO_OPT=
while [ $# -gt 0 ]
do
  case "$1" in
      # Don't run make if create-this-app script is called with --no-make arg
      --no-make)
          SKIP_MAKE=1
          ;;
      --rebuild)
          rm -f ./Makefile ${BSP_DIR}/settings.bsp
          REBUILD=1
          ;;
      --debug)
          NO_OPT=1
          ;;
      --debug_lvl)
         shift
         DEBUG_LVL_IN="$1"
         echo INFO: DEBUG_LVL_IN set to \"$DEBUG_LVL_IN\"          
         ;;          
	  --sopcdir)
		 shift
		 #relative path!
		 SOPC_DIR=$PWD/$1
		 echo SOPC_DIR set to \"$SOPC_DIR\"
		 echo -------------------------------
		 ;;		  
  esac
  shift
done

###############################################################################
# Include directories
INCLUDES="\
${PWD} \
${LIBAPIDIR}/include \
${LIBAPIDIR}/include/public \
${LIBAPIDIR}/include/openPOWERLINK \
${LIBAPIDIR}/utils \
${POWERLINKDIR}/Include \
${APPDIR}/target/altera_nios/include"

###############################################################################
# Custom libraries
LIBDIRS="${LIBAPIDIR}/target/nios2_newlib"
LIBNAMES="CnApi"
LIBTARGETFOLDER=$LIBAPIDIR/target/nios2_newlib

###############################################################################
# handle --debug parameter

# DEF_DEBUG_LVL = [
# 0x00000100L DEBUG_LVL_09 (= DEBUG_LVL_CNAPI_FUNC)
# 0x00000200L DEBUG_LVL_10 (= DEBUG_LVL_CNAPI_ERR)
# 0x00000400L DEBUG_LVL_11 (= DEBUG_LVL_CNAPI_INFO)
# 0x00000800L DEBUG_LVL_12 (= DEBUG_LVL_CNAPI_SPI)
# 0x00001000L DEBUG_LVL_13 (= DEBUG_LVL_CNAPI_ASYNC_INFO)
# 0x00002000L DEBUG_LVL_14 (= DEBUG_LVL_DEFAULT_OBD_ACC)
# 0x00004000L DEBUG_LVL_15 (= DEBUG_LVL_FWUPDATE)
# 0x00008000L DEBUG_LVL_16 (= DEBUG_LVL_CNAPI_PDO)
# 0x00010000L DEBUG_LVL_17 (= DEBUG_LVL_CNAPI_EVENT)
# 0x00020000L DEBUG_LVL_18 (= DEBUG_LVL_CNAPI_VETH)
# 0x20000000L DEBUG_LVL_ASSERT
# 0x40000000L DEBUG_LVL_ERROR
# 0x80000000L DEBUG_LVL_ALWAYS ]

if [ -z "$NO_OPT" ]; then
    DBG_MODE=NDEBUG	# Do not compile printf macros. This define overwrites all others printf-debug defines
	DEF_DEBUG_LVL="0x00000000L" # only ASSERT, ERROR and ALWAYS messages
else
    DBG_MODE=_DEBUG	# compile printfs()
	DEF_DEBUG_LVL="0xEC000600L" # only ASSERT, ERROR and ALWAYS + CN API messages
fi

if [ -z "$NO_OPT" ]; then
    DBG_MODE=NDEBUG	# Do not compile printf macros. This define overwrites all others printf-debug defines
    DEF_DEBUG_LVL="0x00000000L" # additionally disables all print macros
else
    case "$DEBUG_LVL_IN" in
      1)
          DBG_MODE=_DEBUG	# compile printfs()
          DEF_DEBUG_LVL="0xEC002F00L" 
          ;;
      2)
          DBG_MODE=_DEBUG	# compile printfs()      
          DEF_DEBUG_LVL="0xEC000600L" 
          ;;
      *)
          echo ERROR: Wrong parameter DEBUG_LVL_IN: \"$DEBUG_LVL_IN\"
          exit 1
          ;;
    esac
fi

CFLAGS="-D${DBG_MODE} -DCN_API_FLAGS=${CN_API_FLAGS} -DDEF_DEBUG_LVL=${DEF_DEBUG_LVL}" # only PCP API debug

###############################################################################
# source files
SRCFILES="main.c \
${APPDIR}/target/altera_nios/src/systemComponents.c"

###############################################################################
# work-around for bug in Nios2 EDS V9.0
cmd="nios2-app-generate-makefile --bsp-dir $BSP_DIR --version"
$cmd | grep "9.0"
if [ "$?" == "0" ] ; then
# V9.0 needs additional double quotes around the include directories
INCLUDES=\"${INCLUDES}\"
fi

NIOS2_APP_GEN_ARGS="--elf-name epl.elf \
--set OBJDUMP_INCLUDE_SOURCE 1 \
--set CREATE_OBJDUMP 0 \
--set CFLAGS=${CFLAGS} \
--set APP_LIBRARY_DIRS=$LIBDIRS \
--set APP_LIBRARY_NAMES=$LIBNAMES \
--set APP_INCLUDE_DIRS=$INCLUDES \
--src-files $SRCFILES"

if [ -z "$SOPC_DIR" ]; then
echo "No SOPC directory specified !"
echo "Use parameter: --sopcdir <SOPC_directory>"
exit 1
fi

if [ -z "$NO_OPT" ]; then
    NIOS2_APP_GEN_ARGS="${NIOS2_APP_GEN_ARGS} --set APP_CFLAGS_OPTIMIZATION -O3"

    # pass on optimization flag
    APP_CFLAGS_OPTIMIZATION="-O3"
else
# in case of --debug option ("-g" means to insert debug information)
    NIOS2_APP_GEN_ARGS="${NIOS2_APP_GEN_ARGS} --set APP_CFLAGS_OPTIMIZATION -O0 --set APP_CFLAGS_DEBUG_LEVEL -g" 

    # pass on optimization flag
    APP_CFLAGS_OPTIMIZATION="-O0"	
fi

# Also make sure that the APP has not been created already.  Check for
# existence of Makefile in the app directory
if [ -f ./Makefile ]
then
    echo Application has already been created!
    echo Delete Makefile if you want to create a new application makefile
    echo or call this script with parameter --rebuild
    exit 1
fi


# We are selecting hal_default bsp because it supports this application.
# Check to see if the hal_default has already been generated by checking for
# existence of the public.mk file.  If not, we need to run
# create-this-bsp file to generate the bsp.
if [ -n "$REBUILD" -o ! -f $BSP_DIR/public.mk ]; then
    # Since BSP doesn't exist, create the BSP
    # Pass any command line arguments passed to this script to the BSP.
    pushd $BSP_DIR >> /dev/null
    ./create-this-bsp $SAVE_ARGS --cpu-name ap_cpu  || {
    	echo "create-this-bsp failed"
    	exit 1
    }
    popd >> /dev/null
fi

cmd="nios2-app-generate-makefile --bsp-dir $BSP_DIR --set QUARTUS_PROJECT_DIR=$SOPC_DIR $NIOS2_APP_GEN_ARGS --use-lib-dir $LIBTARGETFOLDER"

echo "create-this-app: Running \"$cmd\""
$cmd || {
    echo "nios2-app-generate-makefile failed"
    exit 1
}

echo
echo "Rebuild target library before using it..."
echo 
make -C $LIBTARGETFOLDER clean 
make -C $LIBTARGETFOLDER LIB_CFLAGS_USER_FLAGS="-D${DBG_MODE} -DDEF_DEBUG_LVL=${DEF_DEBUG_LVL}" LIB_CFLAGS_OPTIMIZATION="${APP_CFLAGS_OPTIMIZATION}"

if [ -f $LIBTARGETFOLDER/libCnApi.a ]
then
	echo
	echo "Target library rebuild done!"
	echo
else
    echo 
    echo "Target library rebuild ERROR!"
    echo "Rebuild stopped!"
	echo
    exit 1
fi

# get CPU instance number
UART_INSTANCE_ID=
#######################################
# read UART_INSTANCE_ID of CPU_NAME
# from JDI file
#######################################
CPU_NAME="ap_cpu"
JDI_FILE=$SOPC_DIR/nios_openMac.jdi
IN_FILE=$JDI_FILE

if [ ! -f "$IN_FILE" ]
then   # Exit if no such file.
  echo "File $IN_FILE not found."
  exit 1
fi

#check first if cpu name is present in file
pattern=$CPU_NAME 

match_count=$(grep -w -c "$pattern" ${IN_FILE})
if [ $match_count -eq 0 ]; then
    echo "match_count = ${match_count}"
	echo "ERROR: File ${IN_FILE} does not contain pattern '${pattern}'"
    exit 1
fi

# derive instance_id which corrensponds with CPU_NAME
UART_INSTANCE_ID=$(grep -w "hpath" ${IN_FILE} | grep ${CPU_NAME} | awk '{split($0,a,"instance_id="); print a[2]}' | awk '{split($0,a,""); print a[2]}')
echo "$CPU_NAME has INSTANCE: $UART_INSTANCE_ID"
echo
#######################################

echo '# Rules for EPCS flash programming commands (EPCS contains SOF and application)
PROGRAM_EPCS_SUFFIX := -epcs
PROGRAM_EPCS_TARGET := $(addsuffix $(PROGRAM_EPCS_SUFFIX), $(FLASH_FILES))

.PHONY : program-epcs
program-epcs : $(PROGRAM_EPCS_TARGET)

SOF_FILE := $(wildcard $(QUARTUS_PROJECT_DIR)/*.sof)

.PHONY : $(PROGRAM_EPCS_TARGET)
$(PROGRAM_EPCS_TARGET) : $(ELF)

	@$(ECHO) Info: Programming $(basename $@).flash
	@if [ -n "$($(basename $@)_EPCS_FLAGS)" ]; \
	then \
		nios2-configure-sof $(DOWNLOAD_CABLE_FLAG) -C $(QUARTUS_PROJECT_DIR); \
		sof2flash --epcs --input=$(SOF_FILE) --output=sof.flash; \
		$(ELF2FLASH) --after=sof.flash --input=$(ELF) --outfile=$(basename $@)_after_sof.flash --sim_optimize=$(SIM_OPTIMIZE) $(elf2flash_extra_args); \
		$(ECHO) $(FLASHPROG) $(SOPC_SYSID_FLAG) --epcs --base=$($(basename $@)_START) sof.flash $(basename $@)_after_sof.flash; \
		$(FLASHPROG) $(DOWNLOAD_CABLE_FLAG) $(SOPC_SYSID_FLAG) --instance='$UART_INSTANCE_ID '--epcs --base=$($(basename $@)_START) \
		-g --override=./target/altera_nios/nios2-flash-override.txt sof.flash $(basename $@)_after_sof.flash; \
	fi

# Rule for erasing the EPCS memory content    
.PHONY : erase-epcs
erase-epcs:
	@nios2-configure-sof $(DOWNLOAD_CABLE_FLAG) -C $(QUARTUS_PROJECT_DIR); \
	$(ECHO) $(FLASHPROG) $(DOWNLOAD_CABLE_FLAG) $(SOPC_SYSID_FLAG) --epcs --base=$($(basename $(PROGRAM_EPCS_TARGET))_START) --accept-bad-sysid --erase-all; \
	$(FLASHPROG) $(DOWNLOAD_CABLE_FLAG) $(SOPC_SYSID_FLAG) --instance='$UART_INSTANCE_ID '--epcs --base=$($(basename $(PROGRAM_EPCS_TARGET))_START) --accept-bad-sysid --erase-all

# Rule for downloading the FPGA bitstream to the target    
.PHONY : download-bits
download-bits:
	nios2-configure-sof $(DOWNLOAD_CABLE_FLAG) -C $(QUARTUS_PROJECT_DIR)' >> makefile

if [ -z "$SKIP_MAKE" ]; then
	cmd="make"
	
	echo "make clean first..."
	make clean
	
	echo "create-this-app: Running \"$cmd\""
	$cmd || {
    	echo "make failed"
	    exit 1
	}

	echo
	echo "To download and run the application:"
	echo "    1. Make sure the board is connected to the system."
	echo "    2. Run 'make download-bits' to configure the FPGA with the hardware design."
	echo "    3. If you have a stdio device, run 'nios2-terminal' in a different shell."
	echo "    4. Run 'make download-elf' from the application directory."
	echo
	echo "To debug the application:"
	echo "    Import the project into Nios II IDE.  Refer to Nios II IDE Documentation for more information."
	echo
	echo -e ""
fi


exit 0