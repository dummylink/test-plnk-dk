###################################################################
##
## Name     : mgp_to_acp_snoop
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN remap

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = Simple Address Remaper
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = S_AXILITE, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER

## Generics/Parameters: General
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_ADDR_REMAP_DEFAULT = 0x3, DT = std_logic_vector

## Generics/Parameters: Slave Burst Interface
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI
PARAMETER C_S_AXI_RDATA_FIFO_DEPTH = 0, DT = INTEGER
PARAMETER C_S_AXI_INCLUDE_TIMEOUT_CNT = 1, DT = INTEGER
PARAMETER C_S_AXI_TIMEOUT_CNTR_VAL = 8, DT = INTEGER
PARAMETER C_S_AXI_ALIGN_BE_RDADDR = 0, DT = INTEGER
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI
PARAMETER C_S_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI
PARAMETER C_S_AXI_BRIDGE_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, PAIR = C_S_AXI_BRIDGE_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_S_AXI_BRIDGE_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_S_AXI_BRIDGE_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI


## Generics/Parameters for AXI4 Master
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_PROTOCOL         = AXI4, DT = string, TYPE = NON_HDL, VALUES = (AXI4 = AXI4, AXI4Lite = AXI4Lite), BUS = M_AXI
PARAMETER C_MAX_BURST_LEN = 16, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_NATIVE_DATA_WIDTH = 32, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_LENGTH_WIDTH = 12, DT = INTEGER, RANGE = (12:20)
PARAMETER C_ADDR_PIPE_DEPTH = 1, DT = INTEGER, RANGE = (1:14)
PARAMETER C_M_AXI_PROTOCOL = AXI4, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = M_AXI
PARAMETER C_M_AXI_SUPPORTS_USER_SIGNALS = 1, DT = integer, RANGE = (0,1), TYPE = NON_HDL, BUS = M_AXI
PARAMETER C_M_AXI_AWUSER_WIDTH = 5, DT = integer, BUS = M_AXI
PARAMETER C_M_AXI_ARUSER_WIDTH = 5, DT = integer, BUS = M_AXI

## Generics/Parameters for AXI4-lite
PARAMETER C_S_AXILITE_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXILITE
PARAMETER C_S_AXILITE_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXILITE
PARAMETER C_S_AXILITE_MIN_SIZE   = 0x000001ff, DT = std_logic_vector, BUS = S_AXILITE
PARAMETER C_USE_WSTRB        = 0, DT = INTEGER
PARAMETER C_DPHASE_TIMEOUT   = 8, DT = INTEGER
PARAMETER C_BASEADDR         = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXILITE
PARAMETER C_HIGHADDR         = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXILITE
PARAMETER C_S_AXILITE_PROTOCOL   = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXILITE



## Slave Burst Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_AWID = AWID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI
PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI
PORT S_AXI_AWLOCK = AWLOCK, DIR = I, BUS = S_AXI
PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_WLAST = WLAST, DIR = I, BUS = S_AXI
PORT S_AXI_BID = BID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARID = ARID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI
PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI
PORT S_AXI_ARLOCK = ARLOCK, DIR = I, BUS = S_AXI
PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI
PORT S_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_AXI_RID = RID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RLAST = RLAST, DIR = O, BUS = S_AXI



## Ports AXI4 Master
PORT m_axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI
PORT m_axi_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI
PORT md_error = "", DIR = O
PORT m_axi_arready = ARREADY, DIR = I, BUS = M_AXI
PORT m_axi_arvalid = ARVALID, DIR = O, BUS = M_AXI
PORT m_axi_araddr = ARADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_aruser  = ARUSER,  BUS = M_AXI, DIR = O, VEC = [4:0]
PORT m_axi_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI
PORT m_axi_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI
PORT m_axi_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI
PORT m_axi_rready = RREADY, DIR = O, BUS = M_AXI
PORT m_axi_rvalid = RVALID, DIR = I, BUS = M_AXI
PORT m_axi_rdata = RDATA, DIR = I, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI
PORT m_axi_rlast = RLAST, DIR = I, BUS = M_AXI
PORT m_axi_awready = AWREADY, DIR = I, BUS = M_AXI
PORT m_axi_awvalid = AWVALID, DIR = O, BUS = M_AXI
PORT m_axi_awaddr = AWADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awuser  = AWUSER,  BUS = M_AXI, DIR = O, VEC = [4:0]
PORT m_axi_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI
PORT m_axi_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI
PORT m_axi_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI
PORT m_axi_wready = WREADY, DIR = I, BUS = M_AXI
PORT m_axi_wvalid = WVALID, DIR = O, BUS = M_AXI
PORT m_axi_wdata = WDATA, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wstrb = WSTRB, DIR = O, VEC = [((C_M_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wlast = WLAST, DIR = O, BUS = M_AXI
PORT m_axi_bready = BREADY, DIR = O, BUS = M_AXI
PORT m_axi_bvalid = BVALID, DIR = I, BUS = M_AXI
PORT m_axi_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI

#PORT S_AXILITE_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI

## Ports AXI4-Lite
PORT S_AXILITE_ACLK    = "",      BUS = S_AXILITE, DIR = I, SIGIS = CLK
PORT S_AXILITE_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXILITE
PORT S_AXILITE_AWADDR  = AWADDR,  BUS = S_AXILITE, DIR = I, VEC = [(C_S_AXILITE_ADDR_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXILITE_AWVALID = AWVALID, BUS = S_AXILITE, DIR = I
PORT S_AXILITE_WDATA   = WDATA,   BUS = S_AXILITE, DIR = I, VEC = [(C_S_AXILITE_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXILITE_WSTRB   = WSTRB,   BUS = S_AXILITE, DIR = I, VEC = [((C_S_AXILITE_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE
PORT S_AXILITE_WVALID  = WVALID,  BUS = S_AXILITE, DIR = I
PORT S_AXILITE_BREADY  = BREADY,  BUS = S_AXILITE, DIR = I
PORT S_AXILITE_ARADDR  = ARADDR,  BUS = S_AXILITE, DIR = I, VEC = [(C_S_AXILITE_ADDR_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXILITE_ARVALID = ARVALID, BUS = S_AXILITE, DIR = I
PORT S_AXILITE_RREADY  = RREADY,  BUS = S_AXILITE, DIR = I
PORT S_AXILITE_ARREADY = ARREADY, BUS = S_AXILITE, DIR = O
PORT S_AXILITE_RDATA   = RDATA,   BUS = S_AXILITE, DIR = O, VEC = [(C_S_AXILITE_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXILITE_RRESP   = RRESP,   BUS = S_AXILITE, DIR = O, VEC = [1:0]
PORT S_AXILITE_RVALID  = RVALID,  BUS = S_AXILITE, DIR = O
PORT S_AXILITE_WREADY  = WREADY,  BUS = S_AXILITE, DIR = O
PORT S_AXILITE_BRESP   = BRESP,   BUS = S_AXILITE, DIR = O, VEC = [1:0]
PORT S_AXILITE_BVALID  = BVALID,  BUS = S_AXILITE, DIR = O
PORT S_AXILITE_AWREADY = AWREADY, BUS = S_AXILITE, DIR = O


END
